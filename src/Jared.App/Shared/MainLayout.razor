@using Jared.Presentation.Components.Advanced
@using Jared.Presentation.Components.Basic
@using Jared.Presentation.Components.Forms
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime

<PageTitle>Jared.Presentation</PageTitle>

<div class="page @selectedTheme">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <CreateButton
                OpenTaskDialog="@showCreateTaskDialog"
                OpenEpicDialog="@showCreateEpicDialog"
                OpenProjectDialog="@showCreateProjectDialog"/>
            <UserButton />
            <ToggleButton IsToggled="@(selectedTheme == "dark-mode")" IsToggledChanged="(x => setTheme(x))" />
        </div>

        <article class="content px-4">
            @if (isActiveTaskCreateDialog)
            {
                <TaskCreateForm Title="Create new task" CloseDialog="showCreateTaskDialog"/>
            }
            else if (isActiveEpicCreateDialog)
            {
                <EpicCreateForm title="Create new epic" CloseDialog="showCreateEpicDialog" />
            }
            else if (isActiveProjectCreateDialog)
            {
                <ProjectCreateForm title="Create new project" CloseDialog="showCreateProjectDialog" />
            }
            @Body
        </article>
    </main>
</div>

@code {
    private bool isActiveTaskCreateDialog;
    private bool isActiveEpicCreateDialog;
    private bool isActiveProjectCreateDialog;
    private string selectedTheme = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var theme = await JSRuntime.InvokeAsync<string>("readLocalStorage", "theme");
        if (!string.IsNullOrWhiteSpace(theme))
        {
            selectedTheme = theme;
        }
    }
    private async Task setTheme(bool isDarkMode)
    {
        var theme = isDarkMode ? "dark-mode" : string.Empty;
        await JSRuntime.InvokeVoidAsync("addToLocalStorage", "theme", theme);
        selectedTheme = theme;
    }

    private void showCreateTaskDialog()
    {
        isActiveTaskCreateDialog = !isActiveTaskCreateDialog;

        if (isActiveTaskCreateDialog)
        {
            isActiveEpicCreateDialog = false;
            isActiveProjectCreateDialog = false;
        }
    }

    private void showCreateEpicDialog()
    {
        isActiveEpicCreateDialog = !isActiveEpicCreateDialog;

        if (isActiveEpicCreateDialog)
        {
            isActiveTaskCreateDialog = false;
            isActiveProjectCreateDialog = false;
        }
    }

    private void showCreateProjectDialog()
    {
        isActiveProjectCreateDialog = !isActiveProjectCreateDialog;

        if (isActiveProjectCreateDialog)
        {
            isActiveTaskCreateDialog = false;
            isActiveEpicCreateDialog = false;
        }
    }
}
