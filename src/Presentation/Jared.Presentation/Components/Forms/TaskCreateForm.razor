@using Jared.Shared.Enums;
@using Jared.Presentation.Components.Basic
@inject IMediator Mediator

<div class="form-modal-base">
    <div class="form-modal">
        <EditForm Model="@Dto"  OnValidSubmit="save">
            <FluentValidationValidator />
            <div class="form-modal-header">
                <h4 class="blazor-modal-title">&nbsp;&nbsp;@Title</h4>
                <button class="btn btn-close" @onclick="cancel" />
            </div>
            <div class="form-modal-content">
                <div class="form-modal-details">
                    <InputTextField
                        @bind-Value="@Dto.Title"
                        Id="title"
                        Label="Title"
                        ValidationFor="(() => Dto.Title)" />
                    <InputTextAreaField
                        @bind-Value="@Dto.Description"
                        Id="description"
                        Label="Description"
                        ValidationFor="(() => Dto.Description)" />
                    <div class="form-modal-tabs">
                        <InputSelectList
                            @bind-Value="@(Dto.ProjectId)"
                            Items="@projects.ToDictionary(x => x.Id, x => x.Title)"
                            TKey="int"
                            Id="project"
                            Label="Project"
                            ValidationFor="@(() => Dto.ProjectId)" />
                        <InputSelectList
                            @bind-Value="@Dto.EpicId"
                            Items="@epics.Where(x => x.ProjectId == Dto.ProjectId).ToDictionary(x => x.Id, x => x.Title)"
                            TKey="int?"
                            Id="epic"
                            Label="Epic"
                            Disabled=@(Dto.ProjectId == 0)
                            ValidationFor="@(() => Dto.EpicId)" />
                        <InputSelectList
                            @bind-Value="@Dto.ParentId"
                            Items="@tasks.Where(x => x.ProjectId == Dto.ProjectId && x.EpicId == Dto.EpicId).ToDictionary(x => x.Id, x => x.Title)"
                            TKey="int?"
                            Id="parent"
                            Label="Parent task"
                            Disabled=@(Dto.EpicId == 0 || Dto.EpicId is null || Dto.ProjectId == 0)
                            ValidationFor="@(() => Dto.ParentId)" />
                    </div>
                    <div class="form-modal-tabs">
                        <InputSelectEnum
                            @bind-Value="@(Dto.Priority)"
                            ValidationFor="(() => Dto.Priority)"
                            Id="priority"
                            Label="Priority" />
                        <InputSelectEnum
                            @bind-Value="@(Dto.Status)"
                            ValidationFor="(() => Dto.Status)"
                            Id="status"
                            Label="Status" />
                        <InputDateField
                            @bind-Value="@(Dto.Deadline)"
                            Label="Deadline"
                            Id="deadline"
                            ValidationFor="(() => Dto.Deadline)" />
                    </div>
                </div>
            </div>
            <div class="form-modal-footer">
                <button type="submit" class="btn btn-primary-dialog">Save</button>
                <button class="btn btn-danger" @onclick="cancel">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>
