on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'
    - name: Restore dependencies
      run: dotnet restore
    - name: Build the application
      run: dotnet build --no-restore

  unit-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'
      - name: Restore dependencies
        run: dotnet restore 
      - name: Run unit tests
        run: dotnet test --no-restore --filter 'FullyQualifiedName!~integration'

  integration-tests:
    runs-on: ubuntu-latest
    needs: build
  
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
          - 1433:1433
        env:
          SA_PASSWORD: ${{ secrets.JARED_DB_PASSWORD }}
          ACCEPT_EULA: Y
        options: >-
          --name sqlserver
          --health-cmd "exit 0"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'
  
      - name: Restore dependencies
        run: dotnet restore
  
      - name: Build
        run: dotnet build --configuration Release --no-restore
  
      - name: Wait for SQL Server to be ready
        run: |
          echo "Waiting for SQL Server to be ready..."
          for i in {1..30}; do
            if /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${{ secrets.JARED_DB_PASSWORD }} -Q "SELECT 1" &> /dev/null; then
              echo "SQL Server is up and running!"
              break
            fi
            echo "Waiting for SQL Server to start..."
            sleep 2
          done
  
      - name: Run integration tests
        env:
          JARED_DB_SERVER: "sqlserver"
          JARED_DB_USER: ${{ secrets.JARED_DB_USER }}
          JARED_DB_PASSWORD: ${{ secrets.JARED_DB_PASSWORD }}
          JARED_TEST_DB_NAME: ${{ secrets.JARED_TEST_DB_NAME }}
        run: |
          echo "JARED_DB_SERVER: $JARED_DB_SERVER"
          echo "JARED_DB_USER: $JARED_DB_USER"
          echo "JARED_DB_PASSWORD: $JARED_DB_PASSWORD"
          echo "JARED_TEST_DB_NAME: $JARED_TEST_DB_NAME"
          dotnet test --no-restore --filter 'FullyQualifiedName~integration'